suite: Host Windows - DaemonSet
templates:
  - templates/host/daemonset-windows.yaml
release:
  name: release-name
  namespace: shield-namespace
values:
  - ../values/windows.yaml
tests:
  - it: DaemonSet Sanity Check
    asserts:
      - isKind:
          of: DaemonSet
          count: 1
      - equal:
          path: metadata.name
          value: release-name-shield-host-windows

  - it: Test without Custom CA Settings
    asserts:
      - notExists:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env[?(@.name == "SSL_CERT_FILE")]
      - notExists:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts[?(@.name == "ca-certs")]
      - notExists:
          path: spec.template.spec.volumes[?(@.name == "ca-certs")]

  - it: Test with Custom CA In Values
    set:
      ssl:
        ca:
          certs:
            - "test certificate"
          key_name: "custom-ca-from-values.crt"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env[?(@.name == "SSL_CERT_FILE")]
          value:
            name: SSL_CERT_FILE
            value: Sysdig/Shield/certificates/custom-ca-from-values.crt
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: ca-certs
            mountPath: Sysdig/Shield/certificates/
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: ca-certs
            secret:
              secretName: release-name-shield-common-ca

  - it: Test with Custom CA In Existing Secret
    set:
      ssl:
        ca:
          existing_ca_secret: "fake-secret-name"
          existing_ca_secret_key_name: "custom-ca-from-secret.crt"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env[?(@.name == "SSL_CERT_FILE")]
          value:
            name: SSL_CERT_FILE
            value: Sysdig/Shield/certificates/custom-ca-from-secret.crt
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: ca-certs
            mountPath: Sysdig/Shield/certificates/
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: ca-certs
            secret:
              secretName: fake-secret-name

  - it: Test user specified priority class
    set:
      host:
        priority_class:
          name: sysdig-host-shield-priority
    asserts:
      - equal:
          path: spec.template.spec.priorityClassName
          value: sysdig-host-shield-priority

  - it: Test chart created priority class
    set:
      host:
        priority_class:
          create: true
          name: my-fancy-priority-class
          value: 10
    asserts:
      - equal:
          path: spec.template.spec.priorityClassName
          value: my-fancy-priority-class

  - it: Test default container images
    set:
      host_windows:
        image:
          tag: latest
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].image
          value: quay.io/sysdig/host-shield:latest

  - it: Default workload labels
    set:
      host_windows:
        image:
          tag: 11.11.11
    asserts:
      - containsDocument:
          kind: DaemonSet
          apiVersion: apps/v1
          name: release-name-shield-host-windows
          namespace: shield-namespace
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: shield
            app.kubernetes.io/version: 1.0.0
            sysdig/component: host
            sysdig/component-version: 11.11.11

  - it: Default pod labels
    set:
      host_windows:
        image:
          tag: 11.11.11
    asserts:
      - containsDocument:
          kind: DaemonSet
          apiVersion: apps/v1
          name: release-name-shield-host-windows
          namespace: shield-namespace
      - isSubset:
          path: spec.template.metadata.labels
          content:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: shield
            app.kubernetes.io/version: 1.0.0
            sysdig/component: host
            sysdig/component-version: 11.11.11

  - it: Test default nodeSelector
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            kubernetes.io/os: windows

  - it: Test default affinity settings
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/arch
                      operator: In
                      values:
                      - amd64
                    - key: kubernetes.io/os
                      operator: In
                      values:
                      - windows

  - it: Test custom affinity settings
    set:
      host_windows:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                    - arm64
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - windows
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/arch
                      operator: In
                      values:
                      - arm64
                    - key: kubernetes.io/os
                      operator: In
                      values:
                      - windows

  - it: Test default host tolerations
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - effect: NoSchedule
              key: os
              value: Windows

  - it: Test custom host tolerations
    set:
      host_windows:
        tolerations:
          - my: specialtoleration
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - my: specialtoleration

  - it: Test combining tolerations
    set:
      tolerations:
        - my: specialdefaulttoleration
      host_windows:
        tolerations:
          - my: specialhosttoleration
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - my: specialdefaulttoleration
            - my: specialhosttoleration

  - it: Common custom env vars
    set:
      env:
        - name: MY_ENV_VAR
          value: my-value
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: MY_ENV_VAR
            value: my-value

  - it: Common and Host specific custom env vars
    set:
      env:
        - name: MY_ENV_VAR
          value: my-value
      host_windows:
        env:
          - name: MY_HOST_ENV_VAR
            value: my-host-value
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: MY_ENV_VAR
            value: my-value
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: MY_HOST_ENV_VAR
            value: my-host-value

  - it: Ensure cluster specific env vars not present
    set:
      cluster:
        env:
          - name: MY_CLUSTER_ENV_VAR
            value: my-cluster-value
      host_windows:
        env:
          - name: MY_HOST_ENV_VAR
            value: my-host-value
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: MY_HOST_ENV_VAR
            value: my-host-value
      - notContains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: MY_CLUSTER_ENV_VAR
            value: my-cluster-value

  - it: Common volumes and volume mounts
    set:
      volumes:
        - name: my-volume
          emptyDir: {}
      volume_mounts:
        - name: my-volume
          mountPath: /host/my-mount-path
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: my-volume
            mountPath: /host/my-mount-path

  - it: Common and Host specific volumes and volume mounts
    set:
      volumes:
        - name: my-volume
          emptyDir: {}
      volume_mounts:
        - name: my-volume
          mountPath: /host/my-mount-path
      host_windows:
        volumes:
          - name: my-host-volume
            emptyDir: {}
        volume_mounts:
          - name: my-host-volume
            mountPath: /host/my-host-mount-path
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-host-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: my-volume
            mountPath: /host/my-mount-path
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: my-host-volume
            mountPath: /host/my-host-mount-path

  - it: Ensure cluster specific volumes and volume mounts not present
    set:
      cluster:
        volumes:
          - name: my-cluster-volume
            emptyDir: {}
        volume_mounts:
          - name: my-cluster-volume
            mountPath: /host/my-cluster-mount-path
      host_windows:
        volumes:
          - name: my-host-volume
            emptyDir: {}
        volume_mounts:
          - name: my-host-volume
            mountPath: /host/my-host-mount-path
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-host-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: my-host-volume
            mountPath: /host/my-host-mount-path
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: my-cluster-volume
            emptyDir: {}
      - notContains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].volumeMounts
          content:
            name: my-cluster-volume
            mountPath: /host/my-cluster-mount-path

  - it: Ensure port and env var set when host posture is enabled
    set:
      features:
        posture:
          host_posture:
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "sysdig-host-shield")].env
          content:
            name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

  - it: Image pull secrets are populated
    set:
      host_windows:
        image:
          pull_secrets:
            - name: my-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: my-secret

  - it: Multiple pull secrets
    set:
      host_windows:
        image:
          pull_secrets:
            - name: my-secret
            - name: my-other-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets
          value:
            - name: my-secret
            - name: my-other-secret

  - it: Pull secrets are empty if none provided
    asserts:
      - isNullOrEmpty:
          path: spec.template.spec.imagePullSecrets

suite: Registry Scanner - scanOnStart Job
templates:
  - templates/job.yaml
tests:
  - it: checks job manifest is available when scanOnStart is enabled
    set:
      scanOnStart:
        enabled: true
    asserts:
      - containsDocument:
          kind: Job
          apiVersion: batch/v1
  - it: checks job name is same as scanOnStart.jobName
    set:
      scanOnStart:
        enabled: true
        jobName: foo
    asserts:
      - equal:
          path: metadata.name
          value: foo
  - it: sets extraEnvVars on job
    set:
      scanOnStart:
        enabled: true
      extraEnvVars:
        - name: FOO
          value: bar
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: FOO
            value: bar
  - it: sets default labels
    set:
      scanOnStart:
        enabled: true
    asserts:
      - equal:
          path: metadata.labels['app.kubernetes.io/component']
          value: registry-scanner-orchestrator
      - equal:
          path: spec.template.metadata.labels['app.kubernetes.io/component']
          value: registry-scanner-orchestrator
  - it: ttlSecondsAfterFinished default value is set
    set:
      scanOnStart:
        enabled: true
    asserts:
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 3600
  - it: ttlSecondsAfterFinished is set
    set:
      config.scan.orchestrator.ttlSecondsAfterFinished: '0'
      scanOnStart:
        enabled: true
    asserts:
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 0
  - it: ttlSecondsAfterFinished is unset
    set:
      config.scan.orchestrator.ttlSecondsAfterFinished: ''
      scanOnStart:
        enabled: true
    asserts:
      - isNull:
          path: spec.ttlSecondsAfterFinished
  - it: fips is requested
    set:
      scanOnStart:
        enabled: true
      image:
        fips: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ".*-fips$"
  - it: fips is requested along with a custom tag
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas"
        fips: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ".*:bananas-fips$"

  - it: fips is requested along with a custom tag that already includes fips
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas-fips"
        fips: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ".*:bananas-fips$"

  - it: fips is NOT requested but custom tag is
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ".*:bananas$"
  - it: uses generated secret name when existingSecretName is not set
    set:
      config.registryType: "ecr"
      scanOnStart.enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-registry-scanner
                key: aws_secret_access_key
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-registry-scanner
                key: aws_region
  - it: uses existingSecretName when set
    set:
      config.registryType: "ecr"
      scanOnStart.enabled: true
      existingSecretName: my-existing-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-existing-secret
                key: aws_secret_access_key
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: my-existing-secret
                key: aws_region
  - it: does not set AWS_SECRET_ACCESS_KEY when serviceAccount.annotations are set
    set:
      config.registryType: "ecr"
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: arn:aws:iam::123:role/MyRole
      scanOnStart.enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            value: ""
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-registry-scanner
                key: aws_region

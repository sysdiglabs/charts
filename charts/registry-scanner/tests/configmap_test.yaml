suite: Registry Scanner - configmap
templates:
  - templates/configmap.yaml
tests:
  - it: contains a configmap
    asserts:
      - containsDocument:
          kind: ConfigMap
          apiVersion: v1
      - hasDocuments:
          count: 1
  - it: logging defaults to info
    asserts:
      - isNotEmpty:
          path: data
      - matchRegex:
          path: data['config.yaml']
          pattern: "logging: info"

  - it: maxWorkers defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "workers: 5"
  - it: maxWorkers wires if custom setup is given
    set:
      config:
        maxWorkers: 10
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "workers: 10"

  - it: maxTagsPerRepository defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxTagsPerRepository: 5"
  - it: maxTagsPerRepository wires if custom setup is given
    set:
      config:
        filter:
          maxTagsPerRepository: 1
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxTagsPerRepository: 1"

  - it: maxAgeDays defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxAgeDays: 90"
  - it: maxAgeDays wires if custom setup is given
    set:
      config:
        filter:
          maxAgeDays: 1
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxAgeDays: 1"

  - it: maxRepositories defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxRepositoriesPerRegistry: 500"
  - it: maxRepositories wires if custom setup is given
    set:
      config:
        filter:
          maxRepositoriesPerRegistry: 1
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "maxRepositoriesPerRegistry: 1"
  - it: ttlSecondsAfterFinished defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "ttlSecondsAfterFinished: 600"
  - it: ttlSecondsAfterFinished wires if custom setup is given
    set:
      config.scan.jobs.ttlSecondsAfterFinished: 0
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "ttlSecondsAfterFinished: 0"
  - it: resource request and limit defaults if no custom setup is given
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: requests:\n\s*memory:\s*500Mi\n\s*cpu:\s*500m\n\s*limits:\s*memory:\s*2Gi\n\s*cpu:\s*1
  - it: resource request and limit wires if custom setup is given
    set:
      config.scan.jobs.resources:
        requests:
          memory: 1Mi
          cpu: 1m
        limits:
          memory: 2Mi
          cpu: 2m
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: requests:\n\s*memory:\s*1Mi\n\s*cpu:\s*1m\n\s*limits:\s*memory:\s*2Mi\n\s*cpu:\s*2m
  - it: sets the temporaryVolumeSizeLimit on job
    set:
      config:
        scan:
          jobs:
            temporaryVolumeSizeLimit: 10Gi
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "temporaryVolumeSizeLimit: 10Gi"
  - it: sets the default temporaryVolumeSizeLimit on job
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "temporaryVolumeSizeLimit: 2Gi"

  - it: listAllowRegions variable reach the configmap if is set
    set:
      config:
        aws:
          allowListRegions: ['us-west-1']
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: allowListRegions:\n\s*- us-west-1

  - it: nodeSelector variables reaches the configmap if set on root level
    set:
      nodeSelector:
        department: engineering
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: nodeSelector:\n\s*department:\s*engineering

  - it: nodeSelector variables reaches the configmap if set on config.scan.jobs level
    set:
      config:
        scan:
          jobs:
            nodeSelector:
              department: engineering
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: nodeSelector:\n\s*department:\s*engineering

  - it: nodeSelector variables reaches the configmap and overrides root level if both are set
    set:
      nodeSelector:
        department: engineering
      config:
        scan:
          jobs:
            nodeSelector:
              department: human-resources
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: nodeSelector:\n\s*department:\s*human-resources

  - it: allowListMemberAccountIDs variable reach the configmap if is set
    set:
      config:
        aws:
          allowListMemberAccountIDs: [123456789]
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: allowListMemberAccountIDs:\n\s*- 123456789
  - it: platform scanning is not disable by default
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: scan:((.|\n)*)disablePlatformScanning:\s*false
  - it: force scanning on the client component regardless of backend config
    set:
      config:
        scan:
          disablePlatformScanning: "true"
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: scan:((.|\n)*)disablePlatformScanning:\s*true
  - it: fips is requested with inlineScanImage set
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas"
        fips: true
      config.scan.inlineScanImage: foo:bar
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "scan:((.|\n)*)inlineScanImage:.foo:bar-fips\n"
  - it: fips is requested with inlineScanImage already including fips suffix
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas"
        fips: true
      config.scan.inlineScanImage: foo:bar-fips
    asserts:
      - failedTemplate:
          errorMessage: "use `image.fips: true` instead of manually setting fips tag"
  - it: fips is NOT requested with inlineScanImage set
    set:
      scanOnStart:
        enabled: true
      image:
        tag: "bananas"
      config.scan.inlineScanImage: foo:bar
    asserts:
      - matchRegex:
          path: data['config.yaml']
          pattern: "scan:((.|\n)*)inlineScanImage: foo:bar\n"
      - matchRegex:
          path: data['config.yaml']
          pattern: "scan:((.|\n)*)inlineScanImage: foo:bar\n"

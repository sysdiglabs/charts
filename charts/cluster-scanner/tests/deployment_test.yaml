suite: deployment
templates:
  - ../templates/deployment.yaml
  - ../templates/clusterrole.yaml
  - ../templates/clusterrolebinding.yaml
  - ../templates/role.yaml
  - ../templates/rolebinding.yaml
  - ../templates/configmap.yaml
  - ../templates/secret.yaml
values:
  - ../values.yaml
  - ./values.required.yaml
release:
  name: test-release
  namespace: test-ns

tests:
  - it: "generates a deployment resource"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - isKind:
          of: Deployment

  - it: "has correct name and namespace"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - equal:
          path: metadata.name
          value: test-release-cluster-scanner
      - equal:
          path: metadata.namespace
          value: test-ns

  - it: "sets replicas"
    templates:
      - ../templates/deployment.yaml
    set:
      replicaCount: 42
    asserts:
      - equal:
          path: spec.replicas
          value: 42

  - it: "has RSI and ISE containers"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].name
          value: rsi
      - equal:
          path: spec.template.spec.containers[1].name
          value: ise

  - it: "has non empty default image"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].image
      - not: true
        isEmpty:
          path: spec.template.spec.containers[1].image

  - it: "sets tag and repository"
    templates:
      - ../templates/deployment.yaml
    set:
      runtimeStatusIntegrator.image.registry: registry-rsi.io
      runtimeStatusIntegrator.image.repository: test.com/repo
      runtimeStatusIntegrator.image.tag: "0.5.4"
      imageSbomExtractor.image.registry: registry-ise.io
      imageSbomExtractor.image.repository: test-ise.com/repo
      imageSbomExtractor.image.tag: "9.0.1"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: registry-rsi.io/test.com/repo:0.5.4
      - equal:
          path: spec.template.spec.containers[1].image
          value: registry-ise.io/test-ise.com/repo:9.0.1

  - it: "sets kubeconfig env var if set"
    templates:
      - ../templates/deployment.yaml
    set:
      scannerMode: "multi"
      runtimeStatusIntegrator.multiCluster.kubeconfigSecretName: "my-secret"
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].env[?(@.name == "SYSDIG_KUBECONFIG_CONTENT")]
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "SYSDIG_KUBECONFIG_CONTENT")]
          content:
            name: SYSDIG_KUBECONFIG_CONTENT
            valueFrom:
              secretKeyRef:
                name: "my-secret"
                key: .kubeconfig

  - it: "sets redis caching env vars when cache type is redis"
    templates:
      - ../templates/deployment.yaml
    set:
      imageSbomExtractor.cache.type: "distributed"
      imageSbomExtractor.cache.redis.address: "redis://redis:6379"
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[1].env[?(@.name == "ANALYZER_CACHE_REDIS_TTL")]
      - isSubset:
          path: spec.template.spec.containers[1].env[?(@.name == "ANALYZER_CACHE_REDIS_TTL")]
          content:
            name: ANALYZER_CACHE_REDIS_TTL
            valueFrom:
              configMapKeyRef:
                key: "cache_redis_ttl"
                name: "test-release-cluster-scanner"
                optional: true

  - it: "has Recreate rollout strategy"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate

  - it: "sets the local registry secrets when in local mode"
    templates:
      - ../templates/deployment.yaml
    set:
      scannerMode: "local"
      runtimeStatusIntegrator.localCluster:
        rbac:
          allowedPullSecrets:
            namespaceOneName:
              - myDockerSecretOne
              - myDockerSecretTwo
            anotherNamespace:
              - myOtherDockerSecretOne
              - myOtherDockerSecretTwo
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "LOCAL_REGISTRY_SECRETS")]
          value:
            name: LOCAL_REGISTRY_SECRETS
            valueFrom:
              configMapKeyRef:
                key: local_registry_secrets
                name: test-release-cluster-scanner
                optional: true

  - it: "does not set the local registry secrets when in multi mode"
    templates:
      - ../templates/deployment.yaml
    set:
      scannerMode: "multi"
      runtimeStatusIntegrator.multiCluster.kubeconfigSecretName: "my-secret"
      runtimeStatusIntegrator.localCluster:
        rbac:
          allowedPullSecrets:
            namespaceOneName:
              - myDockerSecretOne
              - myDockerSecretTwo
            anotherNamespace:
              - myOtherDockerSecretOne
              - myOtherDockerSecretTwo
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "EVE_ENABLED")]
          value:
            name: EVE_ENABLED
            valueFrom:
              configMapKeyRef:
                key: eve_enabled
                name: test-release-cluster-scanner
                optional: true

  - it: "correctly sets the CLUSTERSCANNER_PLATFORM_ENABLED env var"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "CLUSTERSCANNER_PLATFORM_ENABLED")]
          content:
            name: CLUSTERSCANNER_PLATFORM_ENABLED
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: enable_platform_services
                optional: true
      - isSubset:
          path: spec.template.spec.containers[1].env[?(@.name == "CLUSTERSCANNER_PLATFORM_ENABLED")]
          content:
            name: CLUSTERSCANNER_PLATFORM_ENABLED
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: enable_platform_services
                optional: true

  - it: "has default RSI and ISE pprof ports"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].env[?(@.name == "PPROF_PORT")]
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "PPROF_PORT")]
          content:
            name: PPROF_PORT
            value: "6060"
      - not: true
        isEmpty:
          path: spec.template.spec.containers[1].env[?(@.name == "PPROF_PORT")]
      - isSubset:
          path: spec.template.spec.containers[1].env[?(@.name == "PPROF_PORT")]
          content:
            name: PPROF_PORT
            value: "6061"

  - it: "has correct RSI and ISE pprof ports when provided"
    templates:
      - ../templates/deployment.yaml
    set:
      runtimeStatusIntegrator.ports.pprof: "1010"
      imageSbomExtractor.ports.pprof: "666"
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].env[?(@.name == "PPROF_PORT")]
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "PPROF_PORT")]
          content:
            name: PPROF_PORT
            value: "1010"
      - not: true
        isEmpty:
          path: spec.template.spec.containers[1].env[?(@.name == "PPROF_PORT")]
      - isSubset:
          path: spec.template.spec.containers[1].env[?(@.name == "PPROF_PORT")]
          content:
            name: PPROF_PORT
            value: "666"

  - it: "sets optional envs"
    templates:
      - ../templates/deployment.yaml
    set:
      runtimeStatusIntegrator.env: { ENV_VAR_STRING: "test", ENV_VAR_NUM: 15 }
      imageSbomExtractor.env: { ENV_VAR_BOOL: true }
    asserts:
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].env[?(@.name == "ENV_VAR_STRING")]
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "ENV_VAR_STRING")]
          content:
            name: ENV_VAR_STRING
            value: "test"
      - not: true
        isEmpty:
          path: spec.template.spec.containers[0].env[?(@.name == "ENV_VAR_NUM")]
      - isSubset:
          path: spec.template.spec.containers[0].env[?(@.name == "ENV_VAR_NUM")]
          content:
            name: ENV_VAR_NUM
            value: "15"
      - not: true
        isEmpty:
          path: spec.template.spec.containers[1].env[?(@.name == "ENV_VAR_BOOL")]
      - isSubset:
          path: spec.template.spec.containers[1].env[?(@.name == "ENV_VAR_BOOL")]
          content:
            name: ENV_VAR_BOOL
            value: "true"

  - it: "does not have registry volume nor volumeMounts if mirrors is empty and natsjs tls is disabled"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: false
    templates:
      - ../templates/deployment.yaml
    asserts:
      - isEmpty:
          path: spec.template.spec.volumes
      - isEmpty:
          path: spec.template.spec.containers[1].volumeMounts

  - it: "has registry volume mount if mirrors are configured"
    set:
      imageSbomExtractor.mirrors:
        registryMirrors:
          - "foobar"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: registry-mirrors-config
            configMap:
              name: test-release-cluster-scanner-registry-mirrors
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: registry-mirrors-config
            mountPath: /etc/docker/daemon.json
            subPath: daemon.json
            readOnly: true

  - it: "has volume and volumeMounts if natsjs tls is enabled and no custom certs are being provided"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
    templates:
      - ../templates/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: js-certs
            secret:
              secretName: test-release-cluster-scanner
              items:
                - key: js_tls_key
                  path: js_tls.key
                - key: js_tls_cert
                  path: js_tls.cert
                - key: js_tls_ca
                  path: js_tls.ca
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].env
          content:
            name: NATS_TLS_CA
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: js_tls_ca_paths
                optional: true

  - it: "has volume and volumeMounts if natsjs tls is enabled and custom certs are being provided"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCaSecret: "testCaSecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCaSecretKeyName: "caKeyName"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecret: "testKeySecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecretKeyName: "keyKeyName"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecret: "testCertSecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecretKeyName: "certKeyName"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: js-certs
            projected:
              sources:
                - secret:
                    name: testKeySecret
                    items:
                      - key: keyKeyName
                        path: js_tls.key
                - secret:
                    name: testCertSecret
                    items:
                      - key: certKeyName
                        path: js_tls.cert
                - secret:
                    name: testCaSecret
                    items:
                      - key: caKeyName
                        path: js_tls.ca
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].env
          content:
            name: NATS_TLS_CA
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: js_tls_ca_paths
                optional: true

  - it: "has volume and volumeMounts if natsjs tls is enabled and custom certs are being provided but not the CA Secret"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecret: "testKeySecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecretKeyName: "keyKeyName"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecret: "testCertSecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecretKeyName: "certKeyName"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: js-certs
            projected:
              sources:
                - secret:
                    name: testKeySecret
                    items:
                      - key: keyKeyName
                        path: js_tls.key
                - secret:
                    name: testCertSecret
                    items:
                      - key: certKeyName
                        path: js_tls.cert
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - notContains:
          path: spec.template.spec.containers[1].env
          content:
            name: NATS_TLS_CA
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: js_tls_ca_paths
                optional: true

  - it: "has volume and volumeMounts if natsjs tls is enabled and custom certs with default key names"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecret: "testKeySecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecret: "testCertSecret"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: js-certs
            projected:
              sources:
                - secret:
                    name: testKeySecret
                    items:
                      - key: tls.key
                        path: js_tls.key
                - secret:
                    name: testCertSecret
                    items:
                      - key: tls.crt
                        path: js_tls.cert
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: js-certs
            mountPath: /js-certs
            readOnly: true
      - notContains:
          path: spec.template.spec.containers[1].env
          content:
            name: NATS_TLS_CA
            valueFrom:
              configMapKeyRef:
                name: test-release-cluster-scanner
                key: js_tls_ca_paths
                optional: true

  - it: "fails if it has custom Certs and the existingKeySecret field is missing"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCertSecret: "testCertSecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCaSecret: "testCaSecret"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - failedTemplate:
          errorMessage: "Both existingKeySecret and existingCertSecret must be set when using nats customCerts"

  - it: "fails if it has custom Certs and the existingCertSecret field is missing"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingKeySecret: "testKeySecret"
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCaSecret: "testCaSecret"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - failedTemplate:
          errorMessage: "Both existingKeySecret and existingCertSecret must be set when using nats customCerts"

  - it: "fails if it has custom Certs and both existingKeySecret and existingCertSecret fields are missing"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.customCerts.existingCaSecret: "testCaSecret"
    templates:
      - ../templates/deployment.yaml
    asserts:
      - failedTemplate:
          errorMessage: "Both existingKeySecret and existingCertSecret must be set when using nats customCerts"

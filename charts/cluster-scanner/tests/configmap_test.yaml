suite: configmap
templates:
  - ../templates/configmap.yaml
values:
  - ../values.yaml
release:
  name: test-release
  namespace: test-ns

tests:
  - it: "is a configmap with the correct name"
    set:
      global.sysdig.apiHost: "http://test.com"
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: test-release-cluster-scanner
      - equal:
          path: metadata.namespace
          value: test-ns

  - it: "has correct content"
    set:
      global.sysdig.apiHost: "http://test.com"
    asserts:
      - equal:
          path: data.sysdig_host
          value: "http://test.com"
      - equal:
          path: data.root_namespace
          value: kube-system
      - equal:
          path: data.eve_enabled
          value: "true"
      - equal:
          path: data.eve_integration_enabled
          value: "false"
      - equal:
          path: data.logging_level
          value: "INFO"
      - not: true
        isEmpty:
          path: data.js_server_user
      - not: true
        isEmpty:
          path: data.js_server_url
      - equal:
          path: data.rsi_pprof_enabled
          value: "false"
      - equal:
          path: data.ise_pprof_enabled
          value: "false"
      - equal:
          path: data.rsi_leaderelection_lock_name
          value: test-release-cluster-scanner
      - equal:
          path: data.rsi_leaderelection_lock_namespace
          value: test-ns
      - equal:
          path: data.rsi_service_name
          value: test-release-cluster-scanner
      - equal:
          path: data.ise_cache_type
          value: local
      - equal:
          path: data.ise_cache_local_max_size
          value: "36700160"
      - equal:
          path: data.ise_cache_local_ttl
          value: 168h
      - equal:
          path: data.ise_cache_local_max_element_size
          value: "102400"
      - equal:
          path: data.sysdig_verify_certificate
          value: "true"

  - it: "has local mode as default"
    set:
      global.sysdig.apiHost: "http://test.com"
    asserts:
      - equal:
          path: data.rsi_mode
          value: "local"

  - it: "can set multi mod"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "multi"
    asserts:
      - equal:
          path: data.rsi_mode
          value: "multi"

  - it: "can set local mod"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "local"
    asserts:
      - equal:
          path: data.rsi_mode
          value: "local"

  - it: "raise error on unknown mod"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "foobar"
    asserts:
      - failedTemplate:
          errorMessage: |
            values don't meet the specifications of the schema(s) in the following chart(s):
            cluster-scanner:
            - scannerMode: scannerMode must be one of the following: "local", "multi"

  - it: "has correct format for local_registry_secrets when they are provided"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "local"
      runtimeStatusIntegrator.localCluster:
        rbac:
          allowedPullSecrets:
            namespaceOneName:
              - myDockerSecretOne
              - myDockerSecretTwo
            anotherNamespace:
              - myOtherDockerSecretOne
              - myOtherDockerSecretTwo
    asserts:
      - equal:
          path: data.local_registry_secrets
          value: "anotherNamespace/myOtherDockerSecretOne,anotherNamespace/myOtherDockerSecretTwo,namespaceOneName/myDockerSecretOne,namespaceOneName/myDockerSecretTwo"

  - it: "has correct format for local_registry_secrets when they are not provided"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "local"
    asserts:
      - equal:
          path: data.local_registry_secrets
          value: ""

  - it: "does not evaluate local_registry_secrets when in multi mode"
    set:
      global.sysdig.apiHost: "http://test.com"
      scannerMode: "multi"
      runtimeStatusIntegrator.localCluster:
        rbac:
          allowedPullSecrets:
            namespaceOneName:
              - myDockerSecretOne
              - myDockerSecretTwo
            anotherNamespace:
              - myOtherDockerSecretOne
              - myOtherDockerSecretTwo
    asserts:
      - isNull:
          path: data.local_registry_secrets

  - it: "has correct content with redis caching"
    set:
      global.sysdig.apiHost: "http://test.com"
      imageSbomExtractor.cache.type: "distributed,local"
      imageSbomExtractor.cache.local.maxSizeBytes: "666"
      imageSbomExtractor.cache.local.maxElementSizeBytes: "420"
      imageSbomExtractor.cache.local.ttl: "69h"
      imageSbomExtractor.cache.redis.address: "localhost"
      imageSbomExtractor.cache.redis.user: "foobar"
      imageSbomExtractor.cache.redis.prefix: "gigi"
      imageSbomExtractor.cache.redis.sentinelMaster: "sm"
      imageSbomExtractor.cache.redis.ttl: "16h"
    asserts:
      - equal:
          path: data.sysdig_host
          value: "http://test.com"
      - equal:
          path: data.ise_cache_local_max_size
          value: "666"
      - equal:
          path: data.ise_cache_local_max_element_size
          value: "420"
      - equal:
          path: data.ise_cache_local_ttl
          value: 69h
      - equal:
          path: data.cache_redis_address
          value: localhost
      - equal:
          path: data.cache_redis_user
          value: foobar
      - isNull:
          path: data.cache_redis_password
      - equal:
          path: data.cache_redis_prefix
          value: gigi
      - isNull:
          path: data.cache_redis_tls_enabled
      - isNull:
          path: data.cache_redis_tls_skip
      - isNull:
          path: data.cache_redis_tls_ca
      - equal:
          path: data.cache_redis_sentinel_master
          value: sm
      - isNull:
          path: data.cache_redis_sentinel_address
      - equal:
          path: data.cache_redis_ttl
          value: 16h

  - it: "does not require local caching parameters if distributed"
    set:
      global.sysdig.apiHost: "http://test.com"
      imageSbomExtractor.cache.type: "distributed"
      imageSbomExtractor.cache.redis.address: "localhost"
      imageSbomExtractor.cache.redis.user: "foobar"
      imageSbomExtractor.cache.redis.prefix: "gigi"
      imageSbomExtractor.cache.redis.sentinelMaster: "sm"
      imageSbomExtractor.cache.redis.ttl: "16h"
      imageSbomExtractor.cache.local.maxSizeBytes: "666"
      imageSbomExtractor.cache.local.maxElementSizeBytes: "420"
      imageSbomExtractor.cache.local.ttl: "69h"
    asserts:
      - equal:
          path: data.sysdig_host
          value: "http://test.com"
      - isNull:
          path: data.ise_cache_local_max_size
      - isNull:
          path: data.ise_cache_local_max_element_size
      - isNull:
          path: data.ise_cache_local_ttl
      - equal:
          path: data.cache_redis_address
          value: localhost
      - equal:
          path: data.cache_redis_user
          value: foobar
      - isNull:
          path: data.cache_redis_password
      - equal:
          path: data.cache_redis_prefix
          value: gigi
      - isNull:
          path: data.cache_redis_tls_enabled
      - isNull:
          path: data.cache_redis_tls_skip
      - isNull:
          path: data.cache_redis_tls_ca
      - equal:
          path: data.cache_redis_sentinel_master
          value: sm
      - isNull:
          path: data.cache_redis_sentinel_address
      - equal:
          path: data.cache_redis_ttl
          value: 16h

  - it: "local caching parameters are optional"
    set:
      global.sysdig.apiHost: "http://test.com"
      imageSbomExtractor.cache.type: "local"
      imageSbomExtractor.cache.redis.address: "localhost"
      imageSbomExtractor.cache.redis.user: "foobar"
      imageSbomExtractor.cache.redis.prefix: "gigi"
      imageSbomExtractor.cache.redis.sentinelMaster: "sm"
      imageSbomExtractor.cache.redis.ttl: "16h"
      imageSbomExtractor.cache.local: null
    asserts:
      - equal:
          path: data.sysdig_host
          value: "http://test.com"
      - isNull:
          path: data.ise_cache_local_max_size
      - isNull:
          path: data.ise_cache_local_max_element_size
      - isNull:
          path: data.ise_cache_local_ttl
      - isNull:
          path: data.cache_redis_address
      - isNull:
          path: data.cache_redis_user
      - isNull:
          path: data.cache_redis_password
      - isNull:
          path: data.cache_redis_prefix
      - isNull:
          path: data.cache_redis_tls_enabled
      - isNull:
          path: data.cache_redis_tls_skip
      - isNull:
          path: data.cache_redis_tls_ca
      - isNull:
          path: data.cache_redis_sentinel_master
      - isNull:
          path: data.cache_redis_sentinel_address
      - isNull:
          path: data.cache_redis_ttl

  - it: "has correct value for pprof_enabled flags when provided"
    set:
      global.sysdig.apiHost: "http://test.com"
      runtimeStatusIntegrator.pprofEnabled: "gigi"
      imageSbomExtractor.pprofEnabled: "marzullo"
    asserts:
      - equal:
          path: data.rsi_pprof_enabled
          value: "gigi"
      - equal:
          path: data.ise_pprof_enabled
          value: "marzullo"

  - it: "proxy parameters are optional"
    set:
      global.sysdig.apiHost: "http://test.com"
    asserts:
      - isNull:
          path: data.http_proxy
      - isNull:
          path: data.https_proxy
      - isNull:
          path: data.no_proxy

  - it: "has correct value for proxy parameters when provided"
    set:
      global:
        sysdig:
          apiHost: "http://test.com"
        proxy:
          httpProxy: "fake-http-proxy"
          httpsProxy: "fake-https-proxy"
          noProxy: "fake-no-proxy"
    asserts:
      - equal:
          path: data.http_proxy
          value: "fake-http-proxy"
      - equal:
          path: data.https_proxy
          value: "fake-https-proxy"
      - equal:
          path: data.no_proxy
          value: "fake-no-proxy"

  - it: "has correct platform services value when onPremCompatibilityVersion is NOT provided and region does NOT support platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      global.sysdig.region: ""
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is NOT provided and region supports platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      global.sysdig.region: "us1"
    asserts:
      - equal:
          path: data.enable_platform_services
          value: "true"

  - it: "has correct platform services value when onPremCompatibilityVersion is < 7.0 and region does NOT support platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "6.5.99"
      global.sysdig.region: ""
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is < 7.0 and region supports platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "6.5.99"
      global.sysdig.region: "us1"
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is = 6.5 and region does NOT support platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "6.5"
      global.sysdig.region: ""
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is = 6.5 and region  supports platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "6.5"
      global.sysdig.region: "us1"
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is = 7.0.0 and region does NOT support platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "7.0.0"
      global.sysdig.region: ""
    asserts:
      - equal:
          path: data.enable_platform_services
          value: "true"

  - it: "has correct platform services value when onPremCompatibilityVersion is = 7.0.0 and region supports platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "7.0.0"
      global.sysdig.region: "us1"
    asserts:
      - equal:
          path: data.enable_platform_services
          value: "true"

  - it: "has correct platform services value when onPremCompatibilityVersion is just a major.minor version"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "7.0"
    asserts:
      - equal:
          path: data.enable_platform_services
          value: "true"

  - it: "has correct platform services value when onPremCompatibilityVersion is > 7.0.0"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "7.0.1"
    asserts:
      - equal:
          path: data.enable_platform_services
          value: "true"

  - it: "has correct platform services value when enablePlatformServicesConfig is set to false provided and region supports platform services"
    set:
      global.sysdig.apiHost: "http://test.com"
      global.sysdig.region: "us1"
      disablePlatformScanning: true
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "has correct platform services value when onPremCompatibilityVersion is = 7.0.0, region does NOT support platform services and enablePlatformServicesConfig set to false"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "7.0.0"
      global.sysdig.region: ""
      disablePlatformScanning: true
    asserts:
      - isNull:
          path: data.enable_platform_services

  - it: "fails if onPremCompatibilityVersion is not a valid semver"
    set:
      global.sysdig.apiHost: "http://test.com"
      onPremCompatibilityVersion: "gigimarzullo"
    asserts:
      - failedTemplate:
          errorMessage: "Invalid Semantic Version"

  - it: "has nats TLS enabled when nats tls is enabled"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
    asserts:
      - equal:
          path: data.js_server_tls_enabled
          value: "true"
      - equal:
          path: data.js_tls_skip_verify
          value: "false"
      - equal:
          path: data.js_tls_cert_path
          value: "/js-certs/js_tls.cert"
      - equal:
          path: data.js_tls_key_path
          value: "/js-certs/js_tls.key"
      - equal:
          path: data.js_tls_ca_paths
          value: "/js-certs/js_tls.ca"

  - it: "has nats TLS enabled, and skips tls verification, when nats tls is enabled"
    set:
      runtimeStatusIntegrator.natsJS.tls.enabled: true
      runtimeStatusIntegrator.natsJS.tls.verifyCertificate: false
    asserts:
      - equal:
          path: data.js_server_tls_enabled
          value: "true"
      - equal:
          path: data.js_tls_skip_verify
          value: "true"
      - equal:
          path: data.js_tls_cert_path
          value: "/js-certs/js_tls.cert"
      - equal:
          path: data.js_tls_key_path
          value: "/js-certs/js_tls.key"
      - equal:
          path: data.js_tls_ca_paths
          value: "/js-certs/js_tls.ca"

  - it: "has nats TLS disabled when nats tls settings are not provided"
    set:
      runtimeStatusIntegrator.natsJS.tls: null
    asserts:
      - equal:
          path: data.js_server_tls_enabled
          value: "false"
      - notExists:
          path: data.js_tls_skip_verify
      - notExists:
          path: data.js_tls_cert_path
      - notExists:
          path: data.js_tls_key_path
      - notExists:
          path: data.js_tls_ca_paths

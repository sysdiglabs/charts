suite: Test Service
templates:
  - templates/service.yaml
values:
  - ../ci/base-values.yaml
release:
  name: shield-release
  namespace: shield-namespace
tests:
  - it: Without any features enabled [default values]
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNotNull:
          path: .spec.ports[?(@.name == "monitoring")]
      - equal:
          path: spec.ports[?(@.name == "monitoring")].port
          value: 8080
      - equal:
          path: spec.ports[?(@.name == "monitoring")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "monitoring")].targetPort
          value: monitoring
      - lengthEqual:
          path: spec.ports
          count: 1

  - it: Without any features enabled [custom service monitoring port]
    set:
      service:
        monitoring_port: 1234
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNotNull:
          path: .spec.ports[?(@.name == "monitoring")]
      - equal:
          path: spec.ports[?(@.name == "monitoring")].port
          value: 1234
      - equal:
          path: spec.ports[?(@.name == "monitoring")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "monitoring")].targetPort
          value: monitoring
      - lengthEqual:
          path: spec.ports
          count: 1

  - it: Without any features enabled [custom pod monitoring port]
    set:
      cluster_shield:
        monitoring_port: 1234
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNotNull:
          path: .spec.ports[?(@.name == "monitoring")]
      - equal:
          path: spec.ports[?(@.name == "monitoring")].port
          value: 1234
      - equal:
          path: spec.ports[?(@.name == "monitoring")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "monitoring")].targetPort
          value: monitoring
      - lengthEqual:
          path: spec.ports
          count: 1

  - it: Enable Audit Feature [default values]
    set:
      cluster_shield:
        features:
          audit:
            enabled: true
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "audit")]
      - equal:
          path: spec.ports[?(@.name == "audit")].port
          value: 6443
      - equal:
          path: spec.ports[?(@.name == "audit")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "audit")].targetPort
          value: audit
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable Audit Feature [custom service audit port]
    set:
      cluster_shield:
        features:
          audit:
            enabled: true
      service:
        audit_port: 1234
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "audit")]
      - equal:
          path: spec.ports[?(@.name == "audit")].port
          value: 1234
      - equal:
          path: spec.ports[?(@.name == "audit")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "audit")].targetPort
          value: audit
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable Audit Feature [custom pod audit port]
    set:
      cluster_shield:
        features:
          audit:
            enabled: true
            http_port: 1234
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "audit")]
      - equal:
          path: spec.ports[?(@.name == "audit")].port
          value: 1234
      - equal:
          path: spec.ports[?(@.name == "audit")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "audit")].targetPort
          value: audit
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable Admission Control Feature [default values]
    set:
      cluster_shield:
        features:
          admission_control:
              enabled: true
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "admission")]
      - equal:
          path: spec.ports[?(@.name == "admission")].port
          value: 8443
      - equal:
          path: spec.ports[?(@.name == "admission")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "admission")].targetPort
          value: admission
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable Admission Control Feature [custom service admission_control port]
    set:
      cluster_shield:
        features:
          admission_control:
            enabled: true
      service:
        admission_control_port: 5678
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "admission")]
      - equal:
          path: spec.ports[?(@.name == "admission")].port
          value: 5678
      - equal:
          path: spec.ports[?(@.name == "admission")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "admission")].targetPort
          value: admission
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable Admission Control Feature [custom pod admission_control port]
    set:
      cluster_shield:
        features:
          admission_control:
            enabled: true
            http_port: 5678
    asserts:
      - isKind:
          of: Service
      - isNotNull:
          path: .spec.ports[?(@.name == "admission")]
      - equal:
          path: spec.ports[?(@.name == "admission")].port
          value: 5678
      - equal:
          path: spec.ports[?(@.name == "admission")].protocol
          value: TCP
      - equal:
          path: spec.ports[?(@.name == "admission")].targetPort
          value: admission
      - lengthEqual:
          path: spec.ports
          count: 2

  - it: Enable All Features
    set:
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
              enabled: true
    asserts:
      - isKind:
          of: Service
      - lengthEqual:
          path: spec.ports
          count: 3
      - isNotNull:
          path: .spec.ports[?(@.name == "monitoring")]
      - isNotNull:
          path: .spec.ports[?(@.name == "audit")]
      - isNotNull:
          path: .spec.ports[?(@.name == "admission")]

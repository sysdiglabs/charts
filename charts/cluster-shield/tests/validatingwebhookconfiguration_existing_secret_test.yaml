suite: Test ValidatingWebhookConfiguration with Existing Secret
templates:
  - templates/validatingwebhookconfiguration.yaml
values:
  - ../ci/base-values.yaml
release:
  name: shield-release
  namespace: shield-namespace
kubernetesProvider:
  scheme:
    "v1/Secret":
      gvr:
        version: "v1"
        resource: "secrets"
      namespaced: true
  objects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: sysdig-cluster-shield-tls-certs
        namespace: shield-namespace
      data:
        tls.crt: dGxzIGNlcnQ= # "tls cert"
        tls.key: dGxzIGtleQ== # "tls key"
        ca.crt: Y2EgY2VydA== # "ca cert"
    - apiVersion: v1
      kind: Secret
      metadata:
        name: existing-tls-secret-with-default-keys
        namespace: shield-namespace
      data:
        tls.crt: dGxzIGNlcnQ= # "tls cert"
        tls.key: dGxzIGtleQ== # "tls key"
        ca.crt: Y2EgY2VydA== # "ca cert"
    - apiVersion: v1
      kind: Secret
      metadata:
        name: existing-tls-secret-with-custom-keys
        namespace: shield-namespace
      data:
        tlsCert: dGxzIGNlcnQ= # "tls cert"
        tlsKey: dGxzIGtleQ== # "tls key"
        caCert: Y2EgY2VydA== # "ca cert"
tests:
  - it: Reuse already created TLS Secret
    set:
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
            enabled: true
    asserts:
      - hasDocuments:
          count: 2
      - containsDocument:
          apiVersion: admissionregistration.k8s.io/v1
          kind: ValidatingWebhookConfiguration
          name: shield-release-cluster-shield-audit
        documentIndex: 0
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: sysdig-cluster-shield-tls-certs
        documentIndex: 1
      - equal:
          path: webhooks[?(@.name == "audit.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"
        documentIndex: 0
      - equal:
          path: webhooks[?(@.name == "vac.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"
        documentIndex: 0
      - equal:
          path: data["tls.crt"]
          decodeBase64: true
          value: "tls cert"
        documentIndex: 1
      - equal:
          path: data["tls.key"]
          decodeBase64: true
          value: "tls key"
        documentIndex: 1
      - equal:
          path: data["ca.crt"]
          decodeBase64: true
          value: "ca cert"
        documentIndex: 1


  - it: Use a customer defined secret for TLS Certificates (with default keys) and doesnt create a secret
    set:
      existingTLSSecret:
        name: existing-tls-secret-with-default-keys
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
            enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - containsDocument:
          apiVersion: admissionregistration.k8s.io/v1
          kind: ValidatingWebhookConfiguration
          name: shield-release-cluster-shield-audit
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: sysdig-cluster-shield-tls-certs
        not: true
      - equal:
          path: webhooks[?(@.name == "audit.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"
      - equal:
          path: webhooks[?(@.name == "vac.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"

  - it: Use a customer defined secret for TLS Certificates (with default keys) and doesnt create a secret
    set:
      existingTLSSecret:
        name: existing-tls-secret-with-custom-keys
        tlsCertName: tlsCert
        tlsCertKeyName: tlsKey
        caCertName: caCert
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
            enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - containsDocument:
          apiVersion: admissionregistration.k8s.io/v1
          kind: ValidatingWebhookConfiguration
          name: shield-release-cluster-shield-audit
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: sysdig-cluster-shield-tls-certs
        not: true
      - equal:
          path: webhooks[?(@.name == "audit.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"
      - equal:
          path: webhooks[?(@.name == "vac.secure.sysdig.com")].clientConfig.caBundle
          decodeBase64: true
          value: "ca cert"

  - it: Customer defined secret for TLS Certificates does not exist
    set:
      existingTLSSecret:
        name: not-existing-tls-secret
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
            enabled: true
    asserts:
      - failedTemplate:
          errorMessage: The TLS Secret 'not-existing-tls-secret' does not exist

suite: Test Deployment
templates:
  - templates/deployment.yaml
values:
  - ../ci/base-values.yaml
release:
  name: shield-release
  namespace: shield-namespace
tests:
  - it: Test run-all-namespaced mode
    set:
      run_command: "run-all-namespaced"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNull:
          path: spec.template.spec.hostNetwork
      - isNull:
          path: spec.template.spec.dnsPolicy
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")]
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].securityContext
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].securityContext.privileged
          value: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].args
          content: run-all-namespaced

  - it: Test run-all mode
    set:
      run_command: "run-all"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNull:
          path: spec.template.spec.hostNetwork
      - isNull:
          path: spec.template.spec.dnsPolicy
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")]
      - isNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].securityContext
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].args
          content: run-all

  - it: Test GKE Autopilot
    set:
      run_command: "run-all-namespaced"
      global:
        gke:
          autopilot: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")]
      - isNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].securityContext
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].args
          content: run-all

  - it: Test accessKeySecret is mounted when provided
    set:
      global:
        sysdig:
          accessKeySecret: "test-existing-access-key-secret"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-test-existing-access-key-secret
            secret:
              secretName: test-existing-access-key-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].volumeMounts
          content:
            name: secret-test-existing-access-key-secret
            mountPath: /etc/sysdig/secret-files/test-existing-access-key-secret

  - it: Test env var is set when secureAPITokenSecret provided
    set:
      global:
        sysdig:
          secureAPITokenSecret: "test-existing-secure-api-token-secret"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-test-existing-secure-api-token-secret
            secret:
              secretName: test-existing-secure-api-token-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].volumeMounts
          content:
            name: secret-test-existing-secure-api-token-secret
            mountPath: /etc/sysdig/secret-files/test-existing-secure-api-token-secret

  - it: Test Both accessKeySecret and secureAPITokenSecret are mounted when provided
    set:
      global:
        sysdig:
          accessKeySecret: "test-existing-access-key-secret"
          secureAPITokenSecret: "test-existing-secure-api-token-secret"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-test-existing-access-key-secret
            secret:
              secretName: test-existing-access-key-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].volumeMounts
          content:
            name: secret-test-existing-access-key-secret
            mountPath: /etc/sysdig/secret-files/test-existing-access-key-secret
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-test-existing-secure-api-token-secret
            secret:
              secretName: test-existing-secure-api-token-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].volumeMounts
          content:
            name: secret-test-existing-secure-api-token-secret
            mountPath: /etc/sysdig/secret-files/test-existing-secure-api-token-secret

  - it: Test it has only one mount when accessKeySecret and secureAPITokenSecret are the same
    set:
      global:
        sysdig:
          accessKeySecret: "test-existing-credentials-secret"
          secureAPITokenSecret: "test-existing-credentials-secret"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: shield-release-cluster-shield
      - equal:
          path: metadata.namespace
          value: shield-namespace
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-test-existing-credentials-secret
            secret:
              secretName: test-existing-credentials-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].volumeMounts
          count: 1
          content:
            name: secret-test-existing-credentials-secret
            mountPath: /etc/sysdig/secret-files/test-existing-credentials-secret

  - it: Test readinessProbe default values
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.httpGet.path
          value: /healthz
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.httpGet.port
          value: monitoring
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.periodSeconds
          value: 5

  - it: Test readinessProbe custom values
    set:
      probes:
        readiness:
          initialDelaySeconds: 20
          periodSeconds: 10
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.httpGet.path
          value: /healthz
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.httpGet.port
          value: monitoring
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.initialDelaySeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].readinessProbe.periodSeconds
          value: 10

  - it: Test livenessProbe default values
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.httpGet.path
          value: /healthz
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.httpGet.port
          value: monitoring
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.periodSeconds
          value: 5

  - it: Test livenessProbe custom values
    set:
      probes:
        liveness:
          initialDelaySeconds: 20
          periodSeconds: 10
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.httpGet.path
          value: /healthz
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.httpGet.port
          value: monitoring
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.initialDelaySeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].livenessProbe.periodSeconds
          value: 10

  - it: Test default container ports
    set:
      cluster_shield:
        features:
          audit:
            enabled: true
          admission_control:
            enabled: true
    asserts:
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "monitoring")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "monitoring")].containerPort
          value: 8080
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "audit")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "audit")].containerPort
          value: 6443
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "admission")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "admission")].containerPort
          value: 8443

  - it: Test custom container ports
    set:
      cluster_shield:
        monitoring_port: 1234
        features:
          audit:
            enabled: true
            http_port: 5678
          admission_control:
            enabled: true
            http_port: 9876
    asserts:
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "monitoring")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "monitoring")].containerPort
          value: 1234
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "audit")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "audit")].containerPort
          value: 5678
      - isNotNull:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "admission")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].ports[?(@.name == "admission")].containerPort
          value: 9876

  - it: Test without specifying priorityClassName
    asserts:
      - isNull:
          path: spec.template.spec.priorityClassName

  - it: Test specifying priorityClassName
    set:
      priorityClassName: fake-priority-class-name
    asserts:
      - isNotNull:
          path: spec.template.spec.priorityClassName
      - equal:
          path: spec.template.spec.priorityClassName
          value: fake-priority-class-name

  - it: Test specifying createPriorityClass
    set:
      createPriorityClass: true
    asserts:
      - isNotNull:
          path: spec.template.spec.priorityClassName
      - equal:
          path: spec.template.spec.priorityClassName
          value: shield-release-cluster-shield

  - it: Test specifying both priorityClassName and createPriorityClass
    set:
      createPriorityClass: true
      priorityClassName: fake-priority-class-name
    asserts:
      - isNotNull:
          path: spec.template.spec.priorityClassName
      - equal:
          path: spec.template.spec.priorityClassName
          value: fake-priority-class-name

  - it: Default service account name
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: shield-release-cluster-shield

  - it: Custom service account name
    set:
      serviceAccount:
        name: custom-service-account
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: custom-service-account

  - it: Use image.registry, image.repository and image.tag to build the pullString
    set:
      image:
        registry: "test-registry.io"
        repository: "sysdig/cluster-shield"
        tag: "0.0.0"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].image
          value: test-registry.io/sysdig/cluster-shield:0.0.0

  - it: Use global.imageRegistry,image.repository and image.tag to build the pullString
    set:
      global:
        imageRegistry: "test-global-registry.io"
      image:
        registry: "test-registry.io"
        repository: "sysdig/cluster-shield"
        tag: "0.0.0"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "cluster-shield")].image
          value: test-global-registry.io/sysdig/cluster-shield:0.0.0

  - it: Default DNS Policy
    asserts:
      - notExists:
          path: spec.template.spec.dnsPolicy

  - it: Test hostNetwork
    set:
      hostNetwork: true
    asserts:
      - equal:
          path: spec.template.spec.hostNetwork
          value: true
      - equal:
          path: spec.template.spec.dnsPolicy
          value: ClusterFirstWithHostNet

  - it: Custom DNS Policy
    set:
      dnsPolicy: "None"
    asserts:
      - equal:
          path: spec.template.spec.dnsPolicy
          value: None

  - it: Custom DNS Policy with hostNetwork
    set:
      hostNetwork: true
      dnsPolicy: "None"
    asserts:
      - equal:
          path: spec.template.spec.hostNetwork
          value: true
      - equal:
          path: spec.template.spec.dnsPolicy
          value: None

  - it: Mount existing TLS Secret
    set:
      cluster_shield:
        features:
          admission_control:
            enabled: true
          audit:
            enabled: true
          container_vulnerability_management:
            enabled: true
      existingTLSSecret:
        name: my-custom-tls-secret
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: cert
            secret:
              secretName: my-custom-tls-secret

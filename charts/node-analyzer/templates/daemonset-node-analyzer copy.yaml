{{- if not (include "nodeAnalyzer.gke.autopilot" .) }}
{{- if (include "deploy-na" .) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-node-analyzer
  namespace: {{ include "nodeAnalyzer.namespace" . }}
  labels:
    app.kubernetes.io/name: {{ include "nodeAnalyzer.name" . }}
{{ include "daemonset.labels" . | indent 4 }}
{{ include "nodeAnalyzer.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "nodeAnalyzer.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  updateStrategy:
    type: {{ .Values.daemonset.updateStrategy.type | default "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.daemonset.updateStrategy.rollingUpdate.maxUnavailable | default 1 }}
      {{- if .Values.daemonset.updateStrategy.rollingUpdate.maxSurge }}
      maxSurge: {{ .Values.daemonset.updateStrategy.rollingUpdate.maxSurge }}
      {{- end }}
  template:
    spec:
      containers:
        volumeMounts:
          - name: root-vol
            mountPath: /host
            readOnly: true
          - name: tmp-vol
            mountPath: /host/tmp
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
          {{- if .Values.nodeAnalyzer.bottlerocket.enabled }}
          - name: apiclient
            mountPath: /usr/bin/apiclient
            readOnly: true
          - name: apiserver-socket
            mountPath: /run/api.sock
          {{- end }}
      # kspm-analyzer
      {{- end }}
      {{- if include "nodeAnalyzer.deployImageAnalyzer" . }}
      # image-analyzer
      - name: sysdig-image-analyzer
        image: {{ template "nodeAnalyzer.image.imageAnalyzer" . }}
        securityContext:
          # The privileged flag is necessary for OCP 4.x and other Kubernetes setups that deny host filesystem access to
          # running containers by default regardless of volume mounts. In those cases, access to the CRI socket would fail.
          privileged: true
        imagePullPolicy: {{ .Values.nodeAnalyzer.imageAnalyzer.image.pullPolicy | default .Values.global.image.pullPolicy }}
        resources:
{{ toYaml .Values.nodeAnalyzer.imageAnalyzer.resources | indent 10 }}
        volumeMounts:
          # Needed for some IBM OpenShift clusters which symlink /var/run/containers/storage to contents of /var/data by default
          - mountPath: /var/data
            name: vardata-vol
          - mountPath: /var/run
            name: varrun-vol
          - mountPath: /etc/containers/storage.conf
            name: etc-containers-storage-vol
            readOnly: true
          - mountPath: /var/lib/containers
            name: var-lib-containers-vol
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
          # Custom volume mount here
          {{- if .Values.nodeAnalyzer.imageAnalyzer.extraVolumes.mounts }}
{{ toYaml .Values.nodeAnalyzer.imageAnalyzer.extraVolumes.mounts | indent 10 }}
          {{- end }}
        env:
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              {{- if not ( include "nodeAnalyzer.accessKeySecret" .) }}
              name: {{ template "nodeAnalyzer.fullname" . }}
              {{- else }}
              name: {{ ( include "nodeAnalyzer.accessKeySecret" .) }}
              {{- end }}
              key: access-key
        - name: IMAGE_PERIOD
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: image_period
              optional: true
        - name: IMAGE_CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: image_cache_ttl
              optional: true
        - name: REPORT_PERIOD
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: report_period
              optional: true
        - name: DOCKER_SOCKET_PATH
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: docker_socket_path
              optional: true
        - name: CRI_SOCKET_PATH
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: cri_socket_path
              optional: true
        - name: CONTAINERD_SOCKET_PATH
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: containerd_socket_path
              optional: true
        - name: AM_COLLECTOR_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: collector_endpoint
              optional: true
        - name: AM_COLLECTOR_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: collector_timeout
              optional: true
        - name: VERIFY_CERTIFICATE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: ssl_verify_certificate
              optional: true
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: debug
              optional: true
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: http_proxy
              optional: true
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: https_proxy
              optional: true
        - name: NO_PROXY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-image-analyzer
              key: no_proxy
              optional: true
        {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
        - name: SSL_CERT_FILE
          value: /ca-certs/{{- include "sysdig.custom_ca.keyName"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl) -}}
        {{- end }}
        {{- range $key, $value := .Values.nodeAnalyzer.imageAnalyzer.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
      # image-analyzer
      {{- end }}
      {{- if include "nodeAnalyzer.deployHostAnalyzer" . }}
      # host-analyzer
      - name: sysdig-host-analyzer
        image: {{ template "nodeAnalyzer.image.hostAnalyzer" . }}
        securityContext:
          # The privileged flag is necessary for OCP 4.x and other Kubernetes setups that deny host filesystem access to
          # running containers by default regardless of volume mounts. In those cases, access to any host related components
          # would fail
          privileged: true
        imagePullPolicy: {{ .Values.nodeAnalyzer.hostAnalyzer.image.pullPolicy | default .Values.global.image.pullPolicy }}
        resources:
{{ toYaml .Values.nodeAnalyzer.hostAnalyzer.resources | indent 10 }}
        volumeMounts:
          - mountPath: /host
            name: root-vol
            readOnly: true
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
        env:
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              {{- if not ( include "nodeAnalyzer.accessKeySecret" .) }}
              name: {{ template "nodeAnalyzer.fullname" . }}
              {{- else }}
              name: {{ ( include "nodeAnalyzer.accessKeySecret" .) }}
              {{- end }}
              key: access-key
        - name: AM_COLLECTOR_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: collector_endpoint
        - name: AM_COLLECTOR_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: collector_timeout
              optional: true
        - name: SCHEDULE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: schedule
              optional: true
        - name: ANALYZE_AT_STARTUP
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: analyze_at_startup
              optional: true
        - name: HOST_BASE
          value: /host
        - name: DIRS_TO_SCAN
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: dirs_to_scan
              optional: true
        - name: MAX_SEND_ATTEMPTS
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: max_send_attempts
              optional: true
        - name: VERIFY_CERTIFICATE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: ssl_verify_certificate
              optional: true
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-host-analyzer
              key: debug
              optional: true
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              key: http_proxy
              name: {{ .Release.Name }}-host-analyzer
              optional: true
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              key: https_proxy
              name: {{ .Release.Name }}-host-analyzer
              optional: true
        - name: NO_PROXY
          valueFrom:
            configMapKeyRef:
              key: no_proxy
              name: {{ .Release.Name }}-host-analyzer
              optional: true
        {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
        - name: SSL_CERT_FILE
          value: /ca-certs/{{- include "sysdig.custom_ca.keyName"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl) -}}
        {{- end }}
        {{- range $key, $value := .Values.nodeAnalyzer.hostAnalyzer.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
      # host-analyzer
      {{- end }}
      {{- if include "nodeAnalyzer.deployBenchmarkRunner" . }}
      # benchmark-runner
      - name: sysdig-benchmark-runner
        image: {{ template "nodeAnalyzer.image.benchmarkRunner" . }}
        imagePullPolicy: {{ .Values.nodeAnalyzer.benchmarkRunner.image.pullPolicy | default .Values.global.image.pullPolicy }}
        securityContext:
          # The privileged flag is necessary for OCP 4.x and other Kubernetes setups that deny host filesystem access to
          # running containers by default regardless of volume mounts. In those cases, the benchmark process would fail.
          privileged: true
        resources:
{{ toYaml .Values.nodeAnalyzer.benchmarkRunner.resources | indent 10 }}
        volumeMounts:
          - mountPath: /opt/draios/etc/kubernetes/config
            name: sysdig-agent-config
          - mountPath: /host
            name: root-vol
            readOnly: true
          - mountPath: /host/tmp
            name: tmp-vol
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
        env:
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              {{- if not ( include "nodeAnalyzer.accessKeySecret" .) }}
              name: {{ template "nodeAnalyzer.fullname" . }}
              {{- else }}
              name: {{ ( include "nodeAnalyzer.accessKeySecret" .) }}
              {{- end }}
              key: access-key
        - name: BACKEND_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-benchmark-runner
              key: collector_endpoint
        - name: BACKEND_VERIFY_TLS
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-benchmark-runner
              key: ssl_verify_certificate
              optional: true
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-benchmark-runner
              key: debug
              optional: true
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              key: http_proxy
              name: {{ .Release.Name }}-benchmark-runner
              optional: true
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              key: https_proxy
              name: {{ .Release.Name }}-benchmark-runner
              optional: true
        - name: NO_PROXY
          valueFrom:
            configMapKeyRef:
              key: no_proxy
              name: {{ .Release.Name }}-benchmark-runner
              optional: true
        {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
        - name: SSL_CERT_FILE
          value: /ca-certs/{{- include "sysdig.custom_ca.keyName"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl) -}}
        {{- end }}
        {{- range $key, $value := .Values.nodeAnalyzer.benchmarkRunner.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
      # benchmark-runner
      {{- end }}
      {{- if include "nodeAnalyzer.deployRuntimeScanner" . }}
      # runtime-scanner
      - name: sysdig-runtime-scanner
        image: {{ template "nodeAnalyzer.image.runtimeScanner" . }}
        imagePullPolicy: {{ .Values.nodeAnalyzer.runtimeScanner.image.pullPolicy | default .Values.global.image.pullPolicy }}
        livenessProbe:
          httpGet:
            port: {{ .Values.nodeAnalyzer.runtimeScanner.probesPort }}
            path: /probes/liveness
          initialDelaySeconds: 90
          periodSeconds: 3
        readinessProbe:
          httpGet:
            port: {{ .Values.nodeAnalyzer.runtimeScanner.probesPort }}
            path: /probes/readiness
          initialDelaySeconds: 90
          periodSeconds: 3
        securityContext:
            privileged: true
        resources:
{{ toYaml .Values.nodeAnalyzer.runtimeScanner.resources | indent 10 }}
        # Custom volume mount here
        env:
          - name: TMPDIR
            value: "/tmp"
          - name: PROM_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: prom_port
                optional: true
          - name: MAX_FILE_SIZE_ALLOWED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: analyzer.maxFileSizeAllowed
                optional: true
          - name: MAX_IMAGE_SIZE_ALLOWED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: max_image_size_allowed
                optional: true
          - name: VULNERABILITY_DB_VERSION
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: vuln_db_version
                optional: true
          - name: SYSDIG_API_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: api_endpoint
          - name: SYSDIG_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                {{- if not ( include "nodeAnalyzer.accessKeySecret" .) }}
                name: {{ template "nodeAnalyzer.fullname" . }}
                {{- else }}
                name: {{ ( include "nodeAnalyzer.accessKeySecret" .) }}
                {{- end }}
                key: access-key
          - name: SYSDIG_API_VERIFY_CERTIFICATE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: ssl_verify_certificate
                optional: true
          - name: CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: cluster_name
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: DEBUG
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: debug
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: http_proxy
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: https_proxy
                optional: true
          - name: PROBES_PORT
            value: {{ .Values.nodeAnalyzer.runtimeScanner.probesPort | quote }}
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: no_proxy
                optional: true
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: SSL_CERT_FILE
            value: /ca-certs/{{- include "sysdig.custom_ca.keyName"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl) -}}
          {{- end }}
          {{- range $key, $value := .Values.nodeAnalyzer.runtimeScanner.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          - name: EVE_ENABLED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: eve_enabled
                optional: true
          - name: EVE_INTEGRATION_ENABLED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runtime-scanner
                key: eve_integration_enabled
                optional: true
        volumeMounts:
          # Needed for some IBM OpenShift clusters which symlink /var/run/containers/storage to contents of /var/data by default
          - mountPath: /var/data
            name: vardata-vol
          - mountPath: /var/run
            name: varrun-vol
          - mountPath: /etc/containers/storage.conf
            name: etc-containers-storage-vol
            readOnly: true
          - mountPath: /var/lib/containers
            name: var-lib-containers-vol
          - mountPath: /tmp
            name: tmp-vol
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
          {{- if .Values.nodeAnalyzer.runtimeScanner.extraMounts }}
{{ toYaml .Values.nodeAnalyzer.runtimeScanner.extraMounts | indent 10 }}
          {{- end }}
      # runtime-scanner
      {{- end }}
      {{- if include "nodeAnalyzer.deployHostScanner" . }}
      # host-scanner
      - name: sysdig-host-scanner
        image: {{ template "nodeAnalyzer.image.hostScanner" . }}
        imagePullPolicy: {{ .Values.nodeAnalyzer.hostScanner.image.pullPolicy | default .Values.global.image.pullPolicy }}
        livenessProbe:
          httpGet:
            port: {{ .Values.nodeAnalyzer.hostScanner.probesPort }}
            path: /probes/liveness
          initialDelaySeconds: 90
          periodSeconds: 3
        readinessProbe:
          httpGet:
            port: {{ .Values.nodeAnalyzer.hostScanner.probesPort }}
            path: /probes/readiness
          initialDelaySeconds: 90
          periodSeconds: 3
        securityContext:
          # The privileged flag is necessary for OCP 4.x and other Kubernetes setups that deny host filesystem access to
          # running containers by default regardless of volume mounts.
          privileged: true
        resources:
{{ toYaml .Values.nodeAnalyzer.hostScanner.resources | indent 10 }}
        env:
          - name: HOST_FS_MOUNT_PATH
            value: /host
          - name: HOST_DIRS_TO_SCAN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: dirs_to_scan
                optional: true
          - name: ADDITIONAL_HOST_DIRS_TO_SCAN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: additional_dirs_to_scan
                optional: true
          - name: SCAN_ON_START
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: scan_on_start
                optional: true
          - name: CUSTOM_TAGS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: custom_tags
                optional: true
          - name: SYSDIG_API_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: api_endpoint
          - name: SYSDIG_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                {{- if not ( include "nodeAnalyzer.accessKeySecret" .) }}
                name: {{ template "nodeAnalyzer.fullname" . }}
                {{- else }}
                name: {{ ( include "nodeAnalyzer.accessKeySecret" .) }}
                {{- end }}
                key: access-key
          - name: SYSDIG_API_VERIFY_CERTIFICATE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: ssl_verify_certificate
                optional: true
          - name: K8S_CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: cluster_name
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: DEBUG
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: debug
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: http_proxy
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: https_proxy
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: no_proxy
                optional: true
          - name: MAX_FILE_SIZE_ALLOWED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: analyzer.maxFileSizeAllowed
                optional: true
          - name: VULNERABILITY_DB_VERSION
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: vuln_db_version
                optional: true
          - name: TMPDIR
            value: "/tmp"
          - name: PROBES_PORT
            value: {{ .Values.nodeAnalyzer.hostScanner.probesPort | quote }}
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: SSL_CERT_FILE
            value: /ca-certs/{{- include "sysdig.custom_ca.keyName"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl) -}}
          {{- end }}
          {{- range $key, $value := .Values.nodeAnalyzer.hostScanner.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}

          {{- if .Values.nodeAnalyzer.hostScanner.scanContainers.enabled }}
          # Container scanner
          - name: USE_COMBINED_SCANNER
            value: "true"
          - name: SCAN_CONTAINERS_ENABLED
            value: "true"
          - name: DOCKER_SOCKET_PATHS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: docker_socket_path
                optional: true
          - name: PODMAN_SOCKET_PATHS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-host-scanner
                key: podman_socket_path
                optional: true
          {{- end }}
        volumeMounts:
          - mountPath: /tmp
            name: tmp-vol
          - mountPath: /host
            name: root-vol
            readOnly: true
          {{- if eq (include "sysdig.custom_ca.enabled"  (dict "global" .Values.global.ssl "component" .Values.nodeAnalyzer.ssl)) "true" }}
          - name: ca-cert
            mountPath: /ca-certs
            readOnly: true
          {{- end }}
          {{- if .Values.nodeAnalyzer.hostScanner.extraMounts }}
{{ toYaml .Values.nodeAnalyzer.hostScanner.extraMounts | indent 10 }}
          {{- end }}
      # host-scanner
      {{- end }}
      {{- with .Values.nodeAnalyzer.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      affinity:
      {{- if .Values.nodeAnalyzer.affinity }}
{{ toYaml .Values.nodeAnalyzer.affinity | indent 8 }}
      {{- else }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
              {{- if (include "nodeAnalyzer.kubeVersionLessThan" (dict "root" . "major" 1 "minor" 14)) }}
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                    - linux
              {{- else }}
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
              {{- end }}
      {{- end }}
{{- end }}
{{- end }}
